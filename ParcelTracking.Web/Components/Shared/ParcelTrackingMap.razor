@using MudBlazor
@using ParcelTracking.Core.Models

<div style="height: 400px; position: relative;">
    @if (IsLoading)
    {
        <div class="d-flex align-center justify-center mud-height-full">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else
    {
        <div style="height: 100%; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    border-radius: 8px; 
                    display: flex; 
                    align-items: center; 
                    justify-content: center; 
                    position: relative;
                    overflow: hidden;">
            
            <!-- Map Background Pattern -->
            <div style="position: absolute; 
                        inset: 0; 
                        background-image: radial-gradient(circle at 25% 25%, rgba(255,255,255,0.1) 2px, transparent 2px),
                                          radial-gradient(circle at 75% 75%, rgba(255,255,255,0.1) 2px, transparent 2px);
                        background-size: 50px 50px;">
            </div>

            <!-- Map Content -->
            <div class="d-flex flex-column align-center ga-4" style="z-index: 1;">
                <MudIcon Icon="@Icons.Material.Filled.Map" Size="Size.Large" Color="Color.Surface" />
                <MudText Typo="Typo.h6" Color="Color.Surface">Interactive Map</MudText>
                <MudText Typo="Typo.body2" Color="Color.Surface" Class="text-center">
                    Real-time parcel locations and delivery routes
                </MudText>
                
                <!-- Map Legend -->
                <div class="d-flex ga-4 mt-4">
                    <div class="d-flex align-center ga-1">
                        <div style="width: 12px; height: 12px; background: #4CAF50; border-radius: 50%;"></div>
                        <MudText Typo="Typo.caption" Color="Color.Surface">Delivered</MudText>
                    </div>
                    <div class="d-flex align-center ga-1">
                        <div style="width: 12px; height: 12px; background: #FF9800; border-radius: 50%;"></div>
                        <MudText Typo="Typo.caption" Color="Color.Surface">In Transit</MudText>
                    </div>
                    <div class="d-flex align-center ga-1">
                        <div style="width: 12px; height: 12px; background: #F44336; border-radius: 50%;"></div>
                        <MudText Typo="Typo.caption" Color="Color.Surface">Delayed</MudText>
                    </div>
                </div>
            </div>
            
            <!-- Simulated tracking points -->
            @if (Parcels?.Any() == true)
            {
                @for (int i = 0; i < Math.Min(Parcels.Count, 6); i++)
                {
                    var parcel = Parcels[i];
                    var position = GetMarkerPosition(i);
                    var color = GetParcelStatusColor(parcel.Status);
                    
                    <MudTooltip Text="@($"{parcel.TrackingNumber} - {parcel.Status}")">
                        <MudFab Color="@color" 
                               StartIcon="@Icons.Material.Filled.LocationOn" 
                               Size="Size.Small" 
                               Style="@($"position: absolute; {position}; z-index: 2; animation: pulse 2s infinite;")" />
                    </MudTooltip>
                }
            }
            
            <!-- Animated routes -->
            <div style="position: absolute; 
                        top: 30%; 
                        left: 20%; 
                        width: 60%; 
                        height: 2px; 
                        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.5), transparent);
                        animation: moveRoute 3s infinite;">
            </div>
        </div>
    }
</div>

<style>
    @@keyframes pulse {
        0% { transform: scale(1); opacity: 1; }
        50% { transform: scale(1.1); opacity: 0.8; }
        100% { transform: scale(1); opacity: 1; }
    }
    
    @@keyframes moveRoute {
        0% { transform: translateX(-100%); }
        100% { transform: translateX(100%); }
    }
</style>

@code {
    [Parameter] public List<Parcel>? Parcels { get; set; }
    [Parameter] public bool IsLoading { get; set; }

    private Color GetParcelStatusColor(string status) => status switch
    {
        "Delivered" => Color.Success,
        "In Transit" or "Out for Delivery" => Color.Warning,
        "Delayed" => Color.Error,
        "Picked Up" => Color.Info,
        _ => Color.Default
    };

    private string GetMarkerPosition(int index)
    {
        var positions = new[]
        {
            "top: 20%; left: 15%;",
            "top: 40%; left: 65%;",
            "top: 65%; right: 25%;",
            "bottom: 20%; left: 40%;",
            "top: 30%; right: 15%;",
            "bottom: 35%; left: 20%;"
        };
        
        return positions[index % positions.Length];
    }
}