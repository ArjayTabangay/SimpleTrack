@page "/login"
@attribute [Layout(typeof(EmptyLayout))]

@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject MudTheme DarkGrayTheme

<PageTitle>Login - Parcel Tracking</PageTitle>

<MudThemeProvider Theme="DarkGrayTheme" />


<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="d-flex flex-column align-center justify-center" Style="min-height:100vh">
	<MudPaper Class="pa-6" Elevation="8" Square="false" Rounded="true" Style="width:100%; max-width:600px;">

		<MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Sign In</MudText>

		@if (!string.IsNullOrEmpty(errorMessage))
		{
			<MudAlert Severity="Severity.Error" Dense="true" Variant="Variant.Filled" Class="mb-3">
				@errorMessage
			</MudAlert>
		}

		<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="LoginForm">
			<DataAnnotationsValidator />

			<MudTextField @bind-Value="loginModel.Username"
						  Label="Username"
						  Variant="Variant.Outlined"
						  FullWidth="true"
						  Required="true" />

			<MudTextField @bind-Value="loginModel.Password"
						  Label="Password"
						  InputType="InputType.Password"
						  Variant="Variant.Outlined"
						  FullWidth="true"
						  Required="true"
						  Class="mt-3" />

			<MudButton Variant="Variant.Filled"
					   Color="Color.Primary"
					   FullWidth="true"
					   Disabled="@isLoading" 
					   ButtonType="ButtonType.Submit"
					   Class="mt-4">
				@if (isLoading)
				{
					<MudProgressCircular Indeterminate="true" Size="Size.Small" Class="me-2" />

					<span>Logging in...</span>
				}
				else
				{
					<span>Login</span>
				}
			</MudButton>
		</EditForm>


		<MudDivider Class="my-4" />

		<MudText Typo="Typo.caption" Align="Align.Center" Color="Color.Secondary">
			Demo Accounts:
		</MudText>
		<MudText Typo="Typo.body2" Align="Align.Center" Class="mt-1">
			<code>admin / password123</code><br />
			<code>user / demo123</code><br />
			<code>demo / demo</code>
		</MudText>
	</MudPaper>
</MudContainer>

@code {
	private LoginModel loginModel = new();
	private string? errorMessage;
	private bool isLoading;

	protected override void OnInitialized()
	{
		if (AuthService.IsAuthenticated)
		{
			Navigation.NavigateTo("/admin");
		}
	}

	private async Task HandleLogin()
	{
		isLoading = true;
		errorMessage = null;

		try
		{
			var success = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

			if (success)
			{
				Navigation.NavigateTo("/admin");
			}
			else
			{
				errorMessage = "Invalid username or password. Please try again.";
			}
		}
		catch
		{
			errorMessage = "An error occurred during login. Please try again.";
		}
		finally
		{
			isLoading = false;
		}
	}

	public class LoginModel
	{
		[Required(ErrorMessage = "Username is required")]
		public string Username { get; set; } = string.Empty;

		[Required(ErrorMessage = "Password is required")]
		public string Password { get; set; } = string.Empty;
	}
}
