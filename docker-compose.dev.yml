# Development override for docker-compose
# Usage: docker compose -f docker-compose.dev.yml -p app_dev up --build -d
# This file isolates local development by using different host ports and separate volumes

version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: parceltracking
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "127.0.0.1:55433:5432" # dev host 55433 -> container 5432 (different from prod 55432)
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - parceltracking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "127.0.0.1:63799:6379" # dev host 63799 -> container 6379 (different from prod 63795)
    volumes:
      - redis_data_dev:/data
    networks:
      - parceltracking-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: ParcelTracking.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=parceltracking;Username=postgres;Password=${POSTGRES_PASSWORD:-postgres123};Port=5432
      - ConnectionStrings__Redis=redis:6379
      - Jwt__Issuer=ParcelTracking.Api
      - Jwt__Audience=ParcelTracking.Client
      - Jwt__Key=${JWT_SECRET_KEY:-development-jwt-key-for-local-testing-only-not-secure-for-production}
    ports:
      - "53000:80" # dev host 53000 -> container 80 (different from prod 52000)
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - parceltracking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: ParcelTracking.Web/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ApiSettings__BaseUrl=http://api:80
    ports:
      - "42001:80" # dev host 42001 -> container 80 (different from prod 51001)
    depends_on:
      - api
    networks:
      - parceltracking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  parceltracking-network:
    driver: bridge
