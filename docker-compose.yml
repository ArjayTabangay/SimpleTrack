# Production docker-compose
# Usage: docker compose -f docker-compose.yml -p app_prod up --build -d

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: parceltracking
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    ports:
      - "55432:5432" # host 55432 -> container 5432 (non-default host port)
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - parceltracking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "63795:6379" # host 63795 -> container 6379 (non-default host port)
    volumes:
      - redis_data:/data
    networks:
      - parceltracking-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Service
  api:
    image: ghcr.io/arjaytabangay/simpletrack/api:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=parceltracking;Username=postgres;Password=${POSTGRES_PASSWORD:-postgres123};Port=5432
      - ConnectionStrings__Redis=redis:6379
      - Jwt__Key=${JWT_SECRET_KEY:-your-super-secure-jwt-key-for-production-use-change-this-key}
      - Jwt__Issuer=ParcelTracking.Api
      - Jwt__Audience=ParcelTracking.Client
    ports:
      - "52000:80" # host 52000 -> container 80 (non-default host port)
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - parceltracking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Web Frontend Service
  web:
    image: ghcr.io/arjaytabangay/simpletrack/web:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ApiSettings__BaseUrl=http://api:80
    ports:
      - "41001:80" # host 41001 -> container 80 (non-default host port)
    depends_on:
      - api
    networks:
      - parceltracking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Networks
networks:
  parceltracking-network:
    driver: bridge